// <auto-generated />
using System;
using MatchingApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MatchingApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240812172720_AddingTablesToDb")]
    partial class AddingTablesToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MatchingApp.Models.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("GotLiked")
                        .HasColumnType("bigint");

                    b.Property<long>("HasLike")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsMutual")
                        .HasColumnType("bit");

                    b.Property<string>("UserGotLikedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserHasLikedId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserGotLikedId");

                    b.HasIndex("UserHasLikedId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("MatchingApp.Models.Entities.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("RecieverId")
                        .HasColumnType("bigint");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserRecievedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserSentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserRecievedId");

                    b.HasIndex("UserSentId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MatchingApp.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Active")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Credits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MatchingApp.Models.Entities.Match", b =>
                {
                    b.HasOne("MatchingApp.Models.Entities.User", "UserGotLiked")
                        .WithMany()
                        .HasForeignKey("UserGotLikedId");

                    b.HasOne("MatchingApp.Models.Entities.User", "UserHasLiked")
                        .WithMany()
                        .HasForeignKey("UserHasLikedId");

                    b.Navigation("UserGotLiked");

                    b.Navigation("UserHasLiked");
                });

            modelBuilder.Entity("MatchingApp.Models.Entities.Message", b =>
                {
                    b.HasOne("MatchingApp.Models.Entities.User", "UserRecieved")
                        .WithMany()
                        .HasForeignKey("UserRecievedId");

                    b.HasOne("MatchingApp.Models.Entities.User", "UserSent")
                        .WithMany()
                        .HasForeignKey("UserSentId");

                    b.Navigation("UserRecieved");

                    b.Navigation("UserSent");
                });
#pragma warning restore 612, 618
        }
    }
}
